---

# üìò Documento Unificado ‚Äì Desenvolvimento Frontend

## üè∑Ô∏è Sistema: **KIGI ‚Äì Sistema Financeiro Familiar**

Sistema para controle financeiro familiar, focado em entradas, sa√≠das e parcelamentos, com m√∫ltiplos membros, saldo consolidado e integra√ß√£o com um backend via webservice externo.

---

## ‚öôÔ∏è Arquitetura

* **Frontend**: React + TypeScript + TailwindCSS
* **Comunica√ß√£o**: Apenas via WebService externo (`http://192.168.0.5/api`)
* **Sem l√≥gica de persist√™ncia local**
* **Tipos e interfaces** organizados em `/types`
* **Sistema todo em portugu√™s**
* **Coment√°rios explicativos em todo o c√≥digo**

---


// ============================
// üìÇ src/types.ts
// ============================

export interface Usuario {
  id: number
  nome: string
  senha: string
  papel: 'pai' | 'mae' | 'filho' | 'filha'
}

export interface UsuarioInput {
  nome: string
  senha: string
  papel: 'pai' | 'mae' | 'filho' | 'filha'
}

export interface Empresa {
  id: number
  nome: string
}

export interface EmpresaInput {
  nome: string
}

export interface Produto {
  id: number
  codigoBarras?: string
  nome: string
  unidade: string
  classificacao: string
  precoUnitario: number
}

export interface ProdutoInput {
  codigoBarras?: string
  nome: string
  unidade: string
  classificacao: string
  precoUnitario: number
}

export interface Entrada {
  id: number
  usuarioRegistroId: number
  dataHoraRegistro: string
  usuarioTitularId: number
  dataReferencia: string
  valor: number
  empresaPagadoraId: number
}

export interface EntradaInput {
  usuarioRegistroId: number
  usuarioTitularId: number
  dataReferencia: string
  valor: number
  empresaPagadoraId: number
}

export interface ItemSaida {
  produtoId: number
  nomeProduto: string
  quantidade: number
  precoUnitario: number
  total: number
}

export interface Saida {
  id: number
  usuarioRegistroId: number
  dataHoraRegistro: string
  dataSaida: string
  empresaId: number
  tipoPagamento: 'avista' | 'parcelado'
  usuariosTitularesIds: number[]
  itens: ItemSaida[]
  valorTotal: number
  observacao?: string
  saidaOriginalId?: number
}

export interface SaidaInput {
  usuarioRegistroId: number
  dataSaida: string
  empresaId: number
  tipoPagamento: 'avista' | 'parcelado'
  usuariosTitularesIds: number[]
  itens: ItemSaidaInput[]
  numeroParcelas?: number
  dataPrimeiraParcela?: string
  observacao?: string
}

export interface ItemSaidaInput {
  produtoId: number
  quantidade: number
  precoUnitario: number
}

export interface Parcela {
  id: number
  saidaOriginalId: number
  numeroParcela: number
  dataVencimento: string
  valorParcela: number
  status: 'paga' | 'vencida' | 'a vencer'
  dataPagamento?: string
}

export interface ParcelaInput {
  saidaOriginalId: number
  numeroParcela: number
  dataVencimento: string
  valorParcela: number
}

export interface Transacao {
  id: number
  tipo: 'entrada' | 'saida'
  data: string
  valor: number
  descricao: string
}

export interface ResumoFinanceiro {
  saldoFamiliar: number
  totalEntradas: number
  totalSaidas: number
  totalParcelado: number
  totalPago: number
  totalPendentes: number
}

export interface FiltrosRelatorio {
  dataInicio?: string
  dataFim?: string
  usuarioId?: number
  empresaId?: number
  tipo?: 'entrada' | 'saida'
  formaPagamento?: 'avista' | 'parcelado'
  classificacao?: string
}

export interface RelatorioFinanceiro {
  total: number
  saldoFamiliar: number
  transacoes: Transacao[]
  agrupadoPorClassificacao: { classificacao: string; total: number }[]
}

----

## üîê P√°gina de Login

Autentica o usu√°rio com:

* `nomeUsuario` (texto)
* `senha` (senha)

**Fun√ß√£o**:

```ts
async function autenticarUsuario(nomeUsuario: string, senha: string): Promise<Usuario>
```

---

## üè† P√°gina Inicial / Dashboard

Mostra a vis√£o geral **familiar**, sem saldo individual por usu√°rio.

**Componentes**:

* Cart√£o com saldo total da fam√≠lia
* Gr√°fico de gastos por classifica√ß√£o
* Lista de transa√ß√µes recentes (entradas e sa√≠das)
* Lista de parcelas pendentes agrupadas por m√™s

**Fun√ß√µes**:

```ts
async function obterResumoFinanceiro(): Promise<ResumoFinanceiro>
async function obterUltimasTransacoes(): Promise<Transacao[]>
```

---

## üë§ P√°gina de Gest√£o de Usu√°rios

**Campos**:

* `nome`: texto
* `senha`: senha
* `papel`: dropdown (pai, m√£e, filho, filha)

**A√ß√µes**:

* Cadastrar, editar, excluir
* Visualizar lista e detalhes

**Fun√ß√µes**:

```ts
async function listarUsuarios(): Promise<Usuario[]>
async function criarUsuario(usuario: UsuarioInput): Promise<void>
async function editarUsuario(id: number, dados: UsuarioInput): Promise<void>
async function excluirUsuario(id: number): Promise<void>
```

---

## üí∞ P√°gina de Registro de Entrada Financeira

**Campos**:

* `usuarioTitularId`: membro beneficiado
* `dataReferencia`: data da entrada
* `valor`: valor recebido
* `empresaPagadoraId`: pagadora
* `dataHoraRegistro`: gerado automaticamente
* `usuarioRegistroId`: do login

**Fun√ß√µes**:

```ts
async function listarEmpresas(): Promise<Empresa[]>
async function registrarEntrada(entrada: EntradaInput): Promise<void>
```

---

## üí∏ P√°gina de Registro de Sa√≠da Financeira

### Ordem da tela:

1. Itens da compra (üÜï)
2. Total calculado automaticamente
3. Campos complementares (empresa, data, pagamento, etc.)

### Itens da Compra:

**Op√ß√µes para adicionar item**:

1. **Leitura de QRCode**

   * Abre c√¢mera
   * Envia c√≥digo para backend
   * Retorna produto com pre√ßo

2. **Busca por nome**

   * Campo de busca com sugest√µes conforme digita√ß√£o:

     * Ex: digitar `cam` ‚Üí `CAMA`, `CAMARAO`, `CAMPARI`
   * Selecionar envia ID ao backend que retorna produto e valor

**Valida√ß√£o**:

* ‚ùóNovo item s√≥ pode ser inserido se os anteriores estiverem totalmente preenchidos.

### Participantes da Sa√≠da:

* M√∫ltipla sele√ß√£o de membros da fam√≠lia
* ‚úÖ Bot√£o ‚ÄúFam√≠lia‚Äù: seleciona todos os membros de uma vez

### Campos:

* `empresaId`: recebedora
* `dataSaida`: data da sa√≠da
* `tipoPagamento`: `'avista' | 'parcelado'`
* `numeroParcelas`: se parcelado
* `dataPrimeiraParcela`: se parcelado
* `observacao`: opcional
* `dataHoraRegistro` e `usuarioRegistroId`: autom√°ticos

### Parcelamento:

* Cria sa√≠da "pai" + N sa√≠das "filhas"
* Cada parcela tem:

  * `numeroParcela`
  * `dataVencimento`
  * `valorParcela`
  * `status`: `paga`, `vencida`, `a vencer`
  * `saidaOriginalId`: aponta para a sa√≠da pai

**Fun√ß√µes**:

```ts
async function listarEmpresas(): Promise<Empresa[]>
async function listarProdutos(): Promise<Produto[]>
async function registrarSaida(saida: SaidaInput): Promise<void>
```

---

## üì¶ P√°gina de Cadastro de Produtos/Servi√ßos

**Campos**:

* `codigoBarras`: leitura por c√¢mera (opcional)
* `nome`
* `unidade` (kg, l, un...)
* `classificacao`
* `precoUnitario`

**Fun√ß√µes**:

```ts
async function listarProdutos(): Promise<Produto[]>
async function criarProduto(produto: ProdutoInput): Promise<void>
async function editarProduto(id: number, dados: ProdutoInput): Promise<void>
async function excluirProduto(id: number): Promise<void>
```

---

## üè¢ P√°gina de Cadastro de Empresas

**Campos**:

* `nome`: texto

**Fun√ß√µes**:

```ts
async function listarEmpresas(): Promise<Empresa[]>
async function criarEmpresa(empresa: EmpresaInput): Promise<void>
async function editarEmpresa(id: number, dados: EmpresaInput): Promise<void>
async function excluirEmpresa(id: number): Promise<void>
```

---

## üìÜ P√°gina de Controle de Parcelas

Visualiza√ß√£o e controle das parcelas pendentes.

**Componentes**:

* Lista agrupada por m√™s
* Filtros de status: `paga`, `vencida`, `a vencer` (**‚úî corrigido valor vazio no select**)
* A√ß√£o: marcar como paga

**Fun√ß√µes**:

```ts
async function listarParcelasPendentes(): Promise<Parcela[]>
async function registrarPagamentoParcela(parcelaId: number, dataPagamento: Date): Promise<void>
```

---

## üìä P√°gina de Relat√≥rios

**Filtros**:

* Data inicial / final
* Usu√°rio
* Empresa
* Tipo (entrada / sa√≠da)
* Forma de pagamento (√† vista / parcelado)
* Classifica√ß√£o

**Componentes**:

* Tabela de transa√ß√µes
* Gr√°fico por classifica√ß√£o
* Saldo total familiar
* Exporta√ß√£o (CSV/PDF)

**Corre√ß√£o aplicada**:

* ‚úÖ `<Select.Item>` sempre com `value` v√°lido

**Fun√ß√£o**:

```ts
async function gerarRelatorio(filtros: FiltrosRelatorio): Promise<RelatorioFinanceiro>
```

---

## üö™ P√°gina de Logout

**Fun√ß√£o**:

```ts
function logout(): void
```

---

## üß© Componentes Reutiliz√°veis

### üì∑ `LeitorCodigoBarras`

```ts
function LeitorCodigoBarras({ onScan }: { onScan: (codigo: string) => void }): JSX.Element
```

### üë®‚Äçüë©‚Äçüëß‚Äçüë¶ `SelecionarUsuarios`

Checkbox m√∫ltiplo com bot√£o ‚ÄúFam√≠lia‚Äù para selecionar todos.

### üìã `TabelaItensSaida`

Lista de produtos/servi√ßos com campos:

* Produto (via QR ou busca)
* Quantidade
* Pre√ßo unit√°rio
* Total calculado
* Bot√£o para remover item

### üßæ `ResumoFinanceiroCard`

Exibe saldo total da fam√≠lia.

### üè∑Ô∏è `StatusParcelaTag`

Tag com cor e status: `paga`, `vencida`, `a vencer`

---


